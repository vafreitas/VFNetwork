"use strict";(self.webpackChunkvf_network=self.webpackChunkvf_network||[]).push([[3095],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9115:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:0,title:"How to use",description:"my hello page description",hide_table_of_contents:!1},s=void 0,a={unversionedId:"getting-started/How-to-use",id:"version-1.4.2/getting-started/How-to-use",title:"How to use",description:"my hello page description",source:"@site/versioned_docs/version-1.4.2/getting-started/How-to-use.md",sourceDirName:"getting-started",slug:"/getting-started/How-to-use",permalink:"/docs/1.4.2/getting-started/How-to-use",draft:!1,editUrl:"https://github.com/vafreitas/VFNetwork/versioned_docs/version-1.4.2/getting-started/How-to-use.md",tags:[],version:"1.4.2",sidebarPosition:0,frontMatter:{sidebar_position:0,title:"How to use",description:"my hello page description",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/1.4.2/intro"},next:{title:"Example",permalink:"/docs/1.4.2/getting-started/Example"}},l={},c=[{value:"Info.plist",id:"infoplist",level:3},{value:"HomeAPI.swift",id:"homeapiswift",level:3},{value:"HomeService.swift",id:"homeserviceswift",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,o.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Basically, you need two files to assemble your requests and put Base_URL, Protocol and Environment in your info.plist."),(0,r.kt)("h3",{id:"infoplist"},"Info.plist"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Yout Plist",src:n(1964).Z,width:"568",height:"76"})),(0,r.kt)("p",null,"You have 3 types of Environments for you choose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'enum EnvironmentCase: String {\n    case production = "production"\n    case sandbox = "sandbox"\n    case mock = "mock"\n}\n')),(0,r.kt)("p",null,"In sandbox and mock you will see logs of the VFNetwork itself."),(0,r.kt)("h3",{id:"homeapiswift"},"HomeAPI.swift"),(0,r.kt)("p",null,"Here you will configure your requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'\nimport VFNetwork\n\nenum HomeAPI {\n    case joke\n    case categories\n}\n\nextension HomeAPI: APIBuilder {\n    \n    var path: URLPath {\n        switch self {\n        case .joke:\n            return .plain("jokes/random")\n        case .categories:\n            return .plain("jokes/categories")\n        }\n    }\n    \n    var httpMethod: HTTPMethods {\n        switch self {\n        case .joke, .categories:\n            return .get\n        }\n    }\n    \n    var headers: HTTPHeader {\n        .custom([\n            .bearer("yourToken"),\n            .basic("yourBase64"),\n            .header("custom", "header")\n        ])\n    }\n    \n    var task: HTTPTask {\n        switch self {\n        case .joke, .categories:\n            return .request\n        }\n    }\n    \n')),(0,r.kt)("h3",{id:"homeserviceswift"},"HomeService.swift"),(0,r.kt)("p",null,"And here you will execute your requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import VFNetwork\n\nclass HomeService: RequestService<HomeAPI> {\n    func getJoke(completion: @escaping (Result<JokeModel, Error>) -> Void) {\n        execute(.joke, responseType: JokeModel.self, completion: completion)\n    }\n    \n    func getCategories(completion: @escaping (Result<CategoryModel, Error>) -> Void) {\n        execute(.categories, responseType: CategoryModel.self, completion: completion)\n    }\n}\n\n")))}d.isMDXComponent=!0},1964:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/info-plist-8cb982ccfaa944f45f86357555f0c5a0.png"}}]);