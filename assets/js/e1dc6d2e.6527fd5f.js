"use strict";(self.webpackChunkvf_network=self.webpackChunkvf_network||[]).push([[5666],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:0,title:"How to Use",description:"How to Use Example",hide_table_of_contents:!1},i=void 0,s={unversionedId:"getting-started/How-to-use",id:"getting-started/How-to-use",title:"How to Use",description:"How to Use Example",source:"@site/docs/getting-started/How-to-use.md",sourceDirName:"getting-started",slug:"/getting-started/How-to-use",permalink:"/docs/getting-started/How-to-use",draft:!1,editUrl:"https://github.com/vafreitas/VFNetwork/docs/getting-started/How-to-use.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,title:"How to Use",description:"How to Use Example",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Example",permalink:"/docs/getting-started/Example"}},l={},c=[{value:"Info.plist",id:"infoplist",level:3},{value:"AppDelegate.swift",id:"appdelegateswift",level:3},{value:"Fast and Custom.",id:"fast-and-custom",level:4},{value:"HomeAPI.swift",id:"homeapiswift",level:3},{value:"HomeService.swift",id:"homeserviceswift",level:3}],u={toc:c},p="wrapper";function f(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Basically, you need two files to assemble your requests and put Base_URL, Protocol and Environment in your info.plist."),(0,r.kt)("h3",{id:"infoplist"},"Info.plist"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Yout Plist",src:n(1964).Z,width:"568",height:"76"})),(0,r.kt)("p",null,"You have 3 types of Environments for you choose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'enum EnvironmentCase: String {\n    case production = "production"\n    case sandbox = "sandbox"\n    case mock = "mock"\n}\n')),(0,r.kt)("p",null,"In sandbox and mock you will see logs of the VFNetwork itself."),(0,r.kt)("h3",{id:"appdelegateswift"},"AppDelegate.swift"),(0,r.kt)("p",null,"By default VFNetwork has some configuration but you can customize it in two ways. "),(0,r.kt)("h4",{id:"fast-and-custom"},"Fast and Custom."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        \n    // Fast way\n    VFNetwork.shared.configure([\n        .timeout(10.0)\n    ])\n    \n    // Custom Way\n    VFNetwork.shared.session {\n        let config = URLSessionConfiguration.default\n        config.urlCache = .shared\n        config.urlCredentialStorage = nil\n        config.httpCookieAcceptPolicy = .always\n        config.requestCachePolicy = .reloadRevalidatingCacheData\n        config.timeoutIntervalForRequest = .init(10.0)\n        \n        if #available(iOS 11.0, *) {\n            config.waitsForConnectivity = false\n        }\n        \n        return config\n    }\n    \n    return true\n}\n        \n")),(0,r.kt)("p",null,"and now you can create two files for use."),(0,r.kt)("h3",{id:"homeapiswift"},"HomeAPI.swift"),(0,r.kt)("p",null,"Here you will configure your requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'\nimport VFNetwork\n\nenum HomeAPI {\n    case joke\n    case categories\n}\n\nextension HomeAPI: APIBuilder {\n    \n    var path: URLPath {\n        switch self {\n        case .joke:\n            return .plain("jokes/random")\n        case .categories:\n            return .plain("jokes/categories")\n        }\n    }\n    \n    var httpMethod: HTTPMethods {\n        switch self {\n        case .joke, .categories:\n            return .get\n        }\n    }\n    \n    var headers: HTTPHeader {\n        .custom([\n            .bearer("yourToken"),\n            .basic("yourBase64"),\n            .header("custom", "header")\n        ])\n    }\n    \n    var task: HTTPTask {\n        switch self {\n        case .joke, .categories:\n            return .request\n        }\n    }\n    \n')),(0,r.kt)("h3",{id:"homeserviceswift"},"HomeService.swift"),(0,r.kt)("p",null,"And here you will execute your requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import VFNetwork\n\nclass HomeService: RequestService<HomeAPI> {\n    func getJoke(completion: @escaping (Result<JokeModel, Error>) -> Void) {\n        execute(.joke, responseType: JokeModel.self, completion: completion)\n    }\n    \n    func getCategories(completion: @escaping (Result<CategoryModel, Error>) -> Void) {\n        execute(.categories, responseType: CategoryModel.self, completion: completion)\n    }\n}\n\n")))}f.isMDXComponent=!0},1964:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/info-plist-8cb982ccfaa944f45f86357555f0c5a0.png"}}]);