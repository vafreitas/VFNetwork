"use strict";(self.webpackChunkvf_network=self.webpackChunkvf_network||[]).push([[5459],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},65:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1,title:"Get",description:"my hello page description",hide_table_of_contents:!1},s="GET",i={unversionedId:"http-methods/get",id:"version-1.4.2/http-methods/get",title:"Get",description:"my hello page description",source:"@site/versioned_docs/version-1.4.2/http-methods/get.md",sourceDirName:"http-methods",slug:"/http-methods/get",permalink:"/docs/1.4.2/http-methods/get",draft:!1,editUrl:"https://github.com/vafreitas/VFNetwork/versioned_docs/version-1.4.2/http-methods/get.md",tags:[],version:"1.4.2",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Get",description:"my hello page description",hide_table_of_contents:!1},sidebar:"tutorialSidebar",previous:{title:"Example",permalink:"/docs/1.4.2/getting-started/Example"},next:{title:"Post",permalink:"/docs/1.4.2/http-methods/post"}},l={},p=[{value:"Type of Tasks.",id:"type-of-tasks",level:3},{value:"VCodable Model Example.",id:"vcodable-model-example",level:3},{value:"POST Example",id:"post-example",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get"},"GET"),(0,o.kt)("p",null,"To configure a route with the get method just configure your httpMethod with ",(0,o.kt)("strong",{parentName:"p"},".get")," and task with ",(0,o.kt)("strong",{parentName:"p"},".request"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'enum HomeAPI {\n    case home\n}\n\nextension HomeAPI: APIBuilder {\n    \n    var path: URLPath {\n        switch self {\n        case .home:\n            return .plain("jokes/random")\n        }\n    }\n    \n    var httpMethod: HTTPMethods {\n        switch self {\n        case .home:\n            return .get // Define method GET\n        }\n    }\n    \n    var headers: HTTPHeader {\n        .empty\n    }\n    \n    var task: HTTPTask {\n        switch self {\n        case .home:\n            return .request // This performs a request without a body\n        }\n    }\n}\n')),(0,o.kt)("h1",{id:"post-put-patch-and-delete"},"POST, PUT, PATCH and DELETE."),(0,o.kt)("p",null,"To configure a route with the post, put, patch or delete method just configure your httpMethod with ",(0,o.kt)("strong",{parentName:"p"},".post, .put, .patch, .delete")," and task with ",(0,o.kt)("strong",{parentName:"p"},".requestEncoder")," with protocol ",(0,o.kt)("strong",{parentName:"p"},"VCodable")," or other type of task."),(0,o.kt)("p",null,"For your request you can choose different tasks, For example."),(0,o.kt)("h3",{id:"type-of-tasks"},"Type of Tasks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'.requestBody([\n     "name": "Victor",\n     "lastname": "Freitas"\n]) // Body\n\n.requestEncoder(model) // Body\n.requestURLParameters(urlParameters: ["transactionId": "ID"]) // Query String\n.requestParameters(bodyParameters: ["name": "Victor"], urlParameters: ["transactionId": "ID"]) // Body with Query String.\n')),(0,o.kt)("h3",{id:"vcodable-model-example"},"VCodable Model Example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Swift"},"struct ExampleModel: VCodable {\n    var name: String\n    var lastname: String\n}\n")),(0,o.kt)("h3",{id:"post-example"},"POST Example"),(0,o.kt)("p",null,"You can do that for PUT, PATCH and DELETE, just choose correct httpMethod and configure your task :)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'enum HomeAPI {\n    case home(ExampleModel)\n}\n\nextension HomeAPI: APIBuilder {\n    \n    var path: URLPath {\n        switch self {\n        case .home:\n            return .plain("jokes/random")\n        }\n    }\n    \n    var httpMethod: HTTPMethods {\n        switch self {\n        case .home:\n            return .post // Define method POST\n        }\n    }\n    \n    var headers: HTTPHeader {\n        .bearer("yourToken")\n    }\n    \n    var task: HTTPTask {\n        switch self {\n        case let .home(model):\n            return .requestEncoder(model) // This performs a request with a body conforms protocol VCodable.\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);