"use strict";(self.webpackChunkvf_network=self.webpackChunkvf_network||[]).push([[9629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const s={},i="Unit Tests",a={unversionedId:"Unit-Tests",id:"version-1.4.2/Unit-Tests",title:"Unit Tests",description:"You can use VFNetwork to test your api call methods.",source:"@site/versioned_docs/version-1.4.2/Unit-Tests.md",sourceDirName:".",slug:"/Unit-Tests",permalink:"/docs/1.4.2/Unit-Tests",draft:!1,editUrl:"https://github.com/vafreitas/VFNetwork/versioned_docs/version-1.4.2/Unit-Tests.md",tags:[],version:"1.4.2",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Post",permalink:"/docs/1.4.2/http-methods/post"}},l={},c=[{value:"Example with MVVM.",id:"example-with-mvvm",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"unit-tests"},"Unit Tests"),(0,o.kt)("p",null,"You can use VFNetwork to test your api call methods."),(0,o.kt)("p",null,"Basically we take the json file that you will create to simulate your response with the ",(0,o.kt)("strong",{parentName:"p"},"JSONMockOrchestrator")," class and simulate a request with this response. Below you will find examples and how it all works."),(0,o.kt)("h1",{id:"register-json-file"},"Register JSON File"),(0,o.kt)("p",null,"For register your json files in code to simulate responses first you need to create them. you can use that structure for example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"tests\n\u2514\u2500\u2500\u2500home\n\u2502   \u2514\u2500\u2500\u2500responses\n\u2502       \u2502   jokesSuccess.json\n\u2502       \u2502   jokesError.json\n\u2502   | HomeViewModelTests.swift\n")),(0,o.kt)("p",null,"and just register. in example below you can find it something like."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},' mock.register(fileNamed: "jokesSuccess") // status code default 200\n mock.register(fileNamed: "jokesError",  statusCode: 400) // with custom status code\n')),(0,o.kt)("h1",{id:"testing-endpoints"},"Testing Endpoints"),(0,o.kt)("p",null,"For your unit tests, you just need to follow example below. or see ",(0,o.kt)("strong",{parentName:"p"},"Example")," project in VFNetwork repository."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important"),". You dont need to import VFNetwork in your test class because your project has VFNetwork added in frameworks."),(0,o.kt)("h2",{id:"example-with-mvvm"},"Example with MVVM."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'import XCTest\n@testable import VFNetwork_Example\n\nclass HomeViewModelTests: XCTestCase {\n\n    var viewModel: HomeViewModel! = .init()\n    var mock: JSONMockOrchestrator!\n\n    override func setUp() {\n        super.setUp()\n        mock = JSONMockOrchestrator()\n        let provider = RequestProvider<HomeAPI>()\n        provider.executor.orchestrator = mock\n        viewModel.service.provider = provider\n    }\n\n    override func tearDown() {\n        super.tearDown()\n        viewModel = nil\n        mock = nil\n    }\n\n    func testJokesSuccess() {\n        let expectation = self.expectation(description: "Test jokes with success")\n        mock.register(fileNamed: "jokesSuccess")\n        viewModel.getJokes { result in\n            switch result {\n            case let .success(jokes):\n                XCTAssertNotNil(jokes)\n                expectation.fulfill()\n            case .failure:\n                XCTFail()\n                expectation.fulfill()\n            }\n        }\n\n        waitForExpectations(timeout: 10.0, handler: nil)\n    }\n\n    func testJokesFailure() {\n        let expectation = self.expectation(description: "Test jokes with failure")\n        mock.register(fileNamed: "", statusCode: 400)\n        viewModel.getJokes { result in\n            switch result {\n            case .success:\n                XCTFail()\n                expectation.fulfill()\n            case .failure(let error):\n                XCTAssertNotNil(error)\n                expectation.fulfill()\n            }\n        }\n\n        waitForExpectations(timeout: 10.0, handler: nil)\n    }\n}\n')))}m.isMDXComponent=!0}}]);